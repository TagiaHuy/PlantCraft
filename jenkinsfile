pipeline {
    agent any

    environment {
        DOCKER_IMAGE_NAME = "tagiahuy/plancraft"
        DOCKERHUB_CREDENTIALS_ID = "12345" // ID c·ªßa credentials ƒë√£ c·∫•u h√¨nh trong Jenkins
        BUILD_VERSION_FILE = "build_version.txt"
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Read & Increment Build Version') {
            steps {
                script {
                    if (!fileExists(BUILD_VERSION_FILE)) {
                        writeFile file: BUILD_VERSION_FILE, text: '0'
                    }

                    def currentVersion = readFile(BUILD_VERSION_FILE).trim().toInteger()
                    def nextVersion = currentVersion + 1

                    writeFile file: BUILD_VERSION_FILE, text: nextVersion.toString()
                    env.CUSTOM_BUILD_VERSION = nextVersion.toString()

                    echo "üî¢ Build version: ${env.CUSTOM_BUILD_VERSION}"
                }
            }
        }


        stage('Clone') {
            steps {
                echo 'Cloning source code'
                git branch: 'main', url: 'https://github.com/TagiaHuy/PlantCraft.git'
            }
        }

        stage('Install dependencies') {
            steps {
                echo 'Installing npm packages'
                sh 'npm install'
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    // sh 'newgrp docker'
                    // echo 'Building Docker image'
                    // sh 'docker build -t plancraft .'
                    sh "docker build -t ${DOCKER_IMAGE_NAME}:${env.CUSTOM_BUILD_VERSION} ."
                    sh "docker tag ${DOCKER_IMAGE_NAME}:${env.CUSTOM_BUILD_VERSION} ${DOCKER_IMAGE_NAME}:latest"

                }
            }
        }
    
        // stage('Test') {
        //     steps {
        //         echo 'Running tests'
        //         // N·∫øu c√≥ test th√¨ b·ªè comment d√≤ng d∆∞·ªõi
        //         bat 'npm test'
        //     }
        // }

        stage('Deploy') {
            steps {
                echo 'Deploying application'
                sh "docker rm -f \$(docker ps -aq) || true"

                // N·∫øu mu·ªën ch·∫°y container, th√™m l·ªánh d∆∞·ªõi:
                sh "docker run -d -p 3000:3000 --name plancraft_${env.CUSTOM_BUILD_VERSION} plancraft"
                // bat 'npm start'
            }
        } 

        stage('Login & Push Docker Image') {
            steps {
                script {
                    withCredentials([usernamePassword(
                        credentialsId: "${DOCKERHUB_CREDENTIALS_ID}",
                        usernameVariable: 'DOCKER_USER',
                        passwordVariable: 'DOCKER_PASS'
                    )]) {
                        sh """
                            echo \$DOCKER_PASS | docker login -u \$DOCKER_USER --password-stdin
                            docker push ${DOCKER_IMAGE_NAME}:${env.CUSTOM_BUILD_VERSION}
                            docker push ${DOCKER_IMAGE_NAME}:latest
                        """
                    }
                }
            }
        }

        stage('Logout Docker') {
            steps {
                sh 'docker logout'
            }
        }

    }
}
pipeline {
    agent any

    environment {
        DOCKER_IMAGE_NAME = "tagiahuy/plancraft"
        DOCKERHUB_CREDENTIALS_ID = "12345"
        BUILD_VERSION_FILE = "build_version.txt"
    }

    stages {
        stage('Checkout & Versioning') {
            steps {
                script {
                    checkout scm

                    if (!fileExists(BUILD_VERSION_FILE)) {
                        writeFile file: BUILD_VERSION_FILE, text: '0'
                    }

                    def currentVersion = readFile(BUILD_VERSION_FILE).trim().toInteger()
                    def nextVersion = currentVersion + 1
                    writeFile file: BUILD_VERSION_FILE, text: nextVersion.toString()
                    env.CUSTOM_BUILD_VERSION = nextVersion.toString()

                    echo "üî¢ Build version: ${env.CUSTOM_BUILD_VERSION}"
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                echo "üê≥ Building Docker image: ${DOCKER_IMAGE_NAME}:${env.CUSTOM_BUILD_VERSION}"
                sh """
                    docker build -t ${DOCKER_IMAGE_NAME}:${env.CUSTOM_BUILD_VERSION} .
                    docker tag ${DOCKER_IMAGE_NAME}:${env.CUSTOM_BUILD_VERSION} ${DOCKER_IMAGE_NAME}:latest
                """
            }
        }

        stage('Test') {
            steps {
                echo 'üß™ Running tests'
                sh 'npm test'
            } 
        }

        stage('Deploy') {
            steps {
                echo "üöÄ Deploying application"
                sh '''
                    CONTAINER_ID=$(docker ps -q --filter "publish=3000")
                    if [ ! -z "$CONTAINER_ID" ]; then
                        docker stop $CONTAINER_ID
                        docker rm $CONTAINER_ID
                    fi
                '''

                sh """
                    docker rm -f plancraft || true
                    docker run -d -p 3000:3000 --name plancraft ${DOCKER_IMAGE_NAME}:${env.CUSTOM_BUILD_VERSION}
                """
            }
        }

        stage('Login & Push Docker Image') {
            steps {
                withCredentials([usernamePassword(
                    credentialsId: "${DOCKERHUB_CREDENTIALS_ID}",
                    usernameVariable: 'DOCKER_USER',
                    passwordVariable: 'DOCKER_PASS'
                )]) {
                    echo "üîê Logging in and pushing image to Docker Hub"
                    sh """
                        echo \$DOCKER_PASS | docker login -u \$DOCKER_USER --password-stdin
                        docker push ${DOCKER_IMAGE_NAME}:${env.CUSTOM_BUILD_VERSION}
                        docker push ${DOCKER_IMAGE_NAME}:latest
                    """
                }
            }
        }
    }

    post {
        always {
            echo "üîì Logging out from Docker Hub"
            sh 'docker logout'
        }
    }
}
